package com.nit.main;

import java.time.LocalDate;
import java.util.Arrays;

import com.nit.comp.Demo;

public class ClassPropertyTest {
	public static void main(String[] args) {
		Class<Demo> c1=Demo.class;
		
		System.out.println("c1 obj maintained class name : "+c1.getName());
		System.out.println("c1 obj class super class : "+c1.getSuperclass());
		System.out.println("c1 obj class fields : "+Arrays.toString(c1.getDeclaredFields()));
		System.out.println("c1 obj class constructors : "+Arrays.toString(c1.getDeclaredConstructors()));
		System.out.println("c1 obj class methods : "+Arrays.toString(c1.getDeclaredMethods()));
		System.out.println("c1 obj interface list : "+Arrays.toString(c1.getInterfaces()));	
		
		
		System.out.println("====================");	
		
		Class<LocalDate> c2=LocalDate.class;
		System.out.println("c2 obj maintained class name : "+c2.getName());
		System.out.println("c2 obj class super class : "+c2.getSuperclass());
		System.out.println("c2 obj class fields : "+Arrays.toString(c2.getDeclaredFields()));
		System.out.println("c2 obj class constructors : "+Arrays.toString(c2.getDeclaredConstructors()));
		System.out.println("c2 obj class methods : "+Arrays.toString(c2.getDeclaredMethods()));
		System.out.println("c2 obj interface list : "+Arrays.toString(c2.getInterfaces()));	
		
	}
}


/*  c1 obj maintained class name : com.nit.comp.Demo
c1 obj class super class : class java.lang.Object
c1 obj class fields : [private int com.nit.comp.Demo.a, private int com.nit.comp.Demo.b]
c1 obj class constructors : [public com.nit.comp.Demo(), public com.nit.comp.Demo(int,int)]
c1 obj class methods : [public int com.nit.comp.Demo.m1()]
c1 obj interface list : []
====================
c2 obj maintained class name : java.time.LocalDate
c2 obj class super class : class java.lang.Object
c2 obj class fields : [public static final java.time.LocalDate java.time.LocalDate.MIN, public static final java.time.LocalDate java.time.LocalDate.MAX, public static final java.time.LocalDate java.time.LocalDate.EPOCH, private static final long java.time.LocalDate.serialVersionUID, private static final int java.time.LocalDate.DAYS_PER_CYCLE, static final long java.time.LocalDate.DAYS_0000_TO_1970, private final int java.time.LocalDate.year, private final short java.time.LocalDate.month, private final short java.time.LocalDate.day]
c2 obj class constructors : [private java.time.LocalDate(int,int,int)]
c2 obj class methods : [public int java.time.LocalDate.get(java.time.temporal.TemporalField), public boolean java.time.LocalDate.equals(java.lang.Object), public java.lang.String java.time.LocalDate.toString(), public int java.time.LocalDate.hashCode(), public int java.time.LocalDate.compareTo(java.lang.Object), public int java.time.LocalDate.compareTo(java.time.chrono.ChronoLocalDate), public long java.time.LocalDate.getLong(java.time.temporal.TemporalField), public java.lang.String java.time.LocalDate.format(java.time.format.DateTimeFormatter), public static java.time.LocalDate java.time.LocalDate.of(int,java.time.Month,int), public static java.time.LocalDate java.time.LocalDate.of(int,int,int), public static java.time.LocalDate java.time.LocalDate.from(java.time.temporal.TemporalAccessor), public boolean java.time.LocalDate.isSupported(java.time.temporal.TemporalUnit), public boolean java.time.LocalDate.isSupported(java.time.temporal.TemporalField), private void java.time.LocalDate.readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException, public java.lang.Object java.time.LocalDate.query(java.time.temporal.TemporalQuery), private static java.time.LocalDate java.time.LocalDate.create(int,int,int), private java.lang.Object java.time.LocalDate.writeReplace(), public java.time.temporal.ValueRange java.time.LocalDate.range(java.time.temporal.TemporalField), public static java.time.LocalDate java.time.LocalDate.parse(java.lang.CharSequence,java.time.format.DateTimeFormatter), public static java.time.LocalDate java.time.LocalDate.parse(java.lang.CharSequence), public static java.time.LocalDate java.time.LocalDate.now(java.time.ZoneId), public static java.time.LocalDate java.time.LocalDate.now(java.time.Clock), public static java.time.LocalDate java.time.LocalDate.now(), public int java.time.LocalDate.getYear(), public int java.time.LocalDate.getMonthValue(), public int java.time.LocalDate.getDayOfMonth(), public java.time.chrono.ChronoLocalDate java.time.LocalDate.minus(long,java.time.temporal.TemporalUnit), public java.time.chrono.ChronoLocalDate java.time.LocalDate.minus(java.time.temporal.TemporalAmount), public java.time.LocalDate java.time.LocalDate.minus(java.time.temporal.TemporalAmount), public java.time.LocalDate java.time.LocalDate.minus(long,java.time.temporal.TemporalUnit), public java.time.temporal.Temporal java.time.LocalDate.minus(long,java.time.temporal.TemporalUnit), public java.time.temporal.Temporal java.time.LocalDate.minus(java.time.temporal.TemporalAmount), public java.time.chrono.ChronoLocalDate java.time.LocalDate.plus(java.time.temporal.TemporalAmount), public java.time.LocalDate java.time.LocalDate.plus(java.time.temporal.TemporalAmount), public java.time.chrono.ChronoLocalDate java.time.LocalDate.plus(long,java.time.temporal.TemporalUnit), public java.time.temporal.Temporal java.time.LocalDate.plus(java.time.temporal.TemporalAmount), public java.time.temporal.Temporal java.time.LocalDate.plus(long,java.time.temporal.TemporalUnit), public java.time.LocalDate java.time.LocalDate.plus(long,java.time.temporal.TemporalUnit), public java.time.chrono.ChronoPeriod java.time.LocalDate.until(java.time.chrono.ChronoLocalDate), public java.time.Period java.time.LocalDate.until(java.time.chrono.ChronoLocalDate), public long java.time.LocalDate.until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit), public java.time.LocalDate java.time.LocalDate.plusDays(long), public java.time.LocalDate java.time.LocalDate.minusDays(long), void java.time.LocalDate.writeExternal(java.io.DataOutput) throws java.io.IOException, static java.time.LocalDate java.time.LocalDate.readExternal(java.io.DataInput) throws java.io.IOException, public java.time.temporal.Temporal java.time.LocalDate.adjustInto(java.time.temporal.Temporal), public java.time.LocalDate java.time.LocalDate.with(java.time.temporal.TemporalField,long), public java.time.LocalDate java.time.LocalDate.with(java.time.temporal.TemporalAdjuster), public java.time.temporal.Temporal java.time.LocalDate.with(java.time.temporal.TemporalAdjuster), public java.time.temporal.Temporal java.time.LocalDate.with(java.time.temporal.TemporalField,long), public java.time.chrono.ChronoLocalDate java.time.LocalDate.with(java.time.temporal.TemporalField,long), public java.time.chrono.ChronoLocalDate java.time.LocalDate.with(java.time.temporal.TemporalAdjuster), public static java.time.LocalDate java.time.LocalDate.ofInstant(java.time.Instant,java.time.ZoneId), public boolean java.time.LocalDate.isAfter(java.time.chrono.ChronoLocalDate), public boolean java.time.LocalDate.isBefore(java.time.chrono.ChronoLocalDate), public boolean java.time.LocalDate.isLeapYear(), public static java.time.LocalDate java.time.LocalDate.ofEpochDay(long), public int java.time.LocalDate.lengthOfMonth(), public int java.time.LocalDate.lengthOfYear(), public java.time.Month java.time.LocalDate.getMonth(), private int java.time.LocalDate.get0(java.time.temporal.TemporalField), public long java.time.LocalDate.toEpochDay(), private long java.time.LocalDate.getProlepticMonth(), public java.time.DayOfWeek java.time.LocalDate.getDayOfWeek(), public int java.time.LocalDate.getDayOfYear(), public java.time.LocalDate java.time.LocalDate.withDayOfMonth(int), public java.time.LocalDate java.time.LocalDate.withDayOfYear(int), public java.time.LocalDate java.time.LocalDate.plusWeeks(long), public java.time.LocalDate java.time.LocalDate.withMonth(int), public java.time.LocalDate java.time.LocalDate.plusMonths(long), public java.time.LocalDate java.time.LocalDate.withYear(int), private static java.time.LocalDate java.time.LocalDate.resolvePreviousValid(int,int,int), public static java.time.LocalDate java.time.LocalDate.ofYearDay(int,int), public java.time.LocalDate java.time.LocalDate.plusYears(long), public java.time.LocalDate java.time.LocalDate.minusMonths(long), long java.time.LocalDate.daysUntil(java.time.LocalDate), private long java.time.LocalDate.monthsUntil(java.time.LocalDate), public java.time.chrono.ChronoLocalDateTime java.time.LocalDate.atTime(java.time.LocalTime), public java.time.LocalDateTime java.time.LocalDate.atTime(int,int), public java.time.OffsetDateTime java.time.LocalDate.atTime(java.time.OffsetTime), public java.time.LocalDateTime java.time.LocalDate.atTime(int,int,int,int), public java.time.LocalDateTime java.time.LocalDate.atTime(int,int,int), public java.time.LocalDateTime java.time.LocalDate.atTime(java.time.LocalTime), int java.time.LocalDate.compareTo0(java.time.LocalDate), public boolean java.time.LocalDate.isEqual(java.time.chrono.ChronoLocalDate), public java.time.chrono.Era java.time.LocalDate.getEra(), public java.time.chrono.IsoEra java.time.LocalDate.getEra(), public java.time.chrono.Chronology java.time.LocalDate.getChronology(), public java.time.chrono.IsoChronology java.time.LocalDate.getChronology(), public java.time.LocalDate java.time.LocalDate.minusYears(long), public java.time.LocalDate java.time.LocalDate.minusWeeks(long), public java.util.stream.Stream java.time.LocalDate.datesUntil(java.time.LocalDate), public java.util.stream.Stream java.time.LocalDate.datesUntil(java.time.LocalDate,java.time.Period), public java.time.LocalDateTime java.time.LocalDate.atStartOfDay(), public java.time.ZonedDateTime java.time.LocalDate.atStartOfDay(java.time.ZoneId), public long java.time.LocalDate.toEpochSecond(java.time.LocalTime,java.time.ZoneOffset), private java.time.LocalDate java.time.LocalDate.lambda$datesUntil$1(long,long,long), private static java.time.LocalDate java.time.LocalDate.lambda$datesUntil$0(long,long,long)]
c2 obj interface list : [interface java.time.temporal.Temporal, interface java.time.temporal.TemporalAdjuster, interface java.time.chrono.ChronoLocalDate, interface java.io.Serializable]
 */